/* CSS is cascading -- previously defined styles can be overridden as you go further down the file. Order matters. Specificity can override this.

specificity website: https://specificity.keegan.st/

color palette website: https://www.coolors.co
https://www.coolors.co/contrast-checker
 */
 /* user agent stylesheet is a stylesheet that can be viewed in Inspect of the values that the browser sets by default */

/* alternative to adding a meta link tag to import fonts 
the more fonts you import from Google, the  longer your page will take to load*/
@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@100&display=swap');
 

/* universal selector
selects all the elements */
* {
    /* CSS reset */
    margin:0;
    /* beware zero padding will affect ol/ul. These come with a natural padding so that the bullets/numbers can be shown. */
    padding:0;
    /* 
    box-sizing: content-box is the default setting. Thhis means that if the width is set to 400px, the border and padding won't be included in that value. The actual *content* will span 400px.
    box-sizing: border-box makes it so that the border and padding, along with the content, would not exceed 400px
     */
    box-sizing: border-box;
}

/*  body is an element selector*/
body {
    /* This will affect all of body's children  due to inheritance. Things related to typography are inherited but everything else is not. Such as the border is not being inherited to each child.*/
    font-size: 22px;
    border: 3px solid;
    /* You don't want to use the viewport width because once the page height becomes too long, a sccrollbar will appear to the right. vw does not account for this scrollbar width and will also add a scrollbar on the bottom x-axis in attempt to show the space of the page that the scrollbar is covering*/
    width: 100vw;
    width: 100%;
    /* the body does not take up the height of the full-page, only long enough for the content within it. This is a fix. */
    min-height: 100vh;
}

p {
    border: 3px solid;
    margin-bottom: 5%;
}

/* class and ID selectors
 Not good practice to use IDs. Want to stick to classes */
.highlight, #second {
    
    font-style: italic;
    font-family:'Courier New', Courier, monospace;

    background-color:gold;
    color:darkblue;
    color:rgb(94, 4, 146);
    /* a (alpha) controls transparency */
    color:rgba(94, 4, 146, 0.5);
    /* hexadecimal. 0-9, A-F 
        #F00, #FF0000 (red)
        #0F0, #00FF00 (green)
        #00F, #0000FF (blue)
     */
    color: rgb(17, 119, 17);
    /* hue, saturation and lightness
    hue: the different color ranges. red is 0, and pink is around the 300/360s.
    saturation at 100% is the full-color and at 0% it would be gray
    50% lightness means is in the middle (it can become equally lighter or darker ) */
    color: hsl(179, 93%, 34%);
    

    text-transform: uppercase;

    line-height:1.5;

}


/* form elements do not naturally inherit typography so this can be written below to cause such inheritance */
button, input, textarea {
    font: inherit;
}

.a {
    /* pixels is  the most common absolute unit that will be used 
    Is not a good idea to use it on font size because the font can't be increased in the browsers user settings. This is poor for accessibility and for user control if they want to make the text larger.
    rem - relative unit
    font-size set by the browser.
    Every element starts off with a size of 1rem by default. 2rem would be double the size naturally established by the browser.
    This is good so if the user settings change, it'll all be relative to the root element/browser settings
    */
    font-size: 16px;
    font-size: 1rem;
    /* If the parent of "a" also has a font size of 2rem, this will not affect the element because it is *only* dependent on the size of the root doc elem (html selector), not its parent */
    font-size: 2rem;

    /* this *would* in fact be impacted by its parent and the font size would be compounded (4em). thus em not desired */
    font-size: 2em;

    /* Can also be used on padding and margins. bc it's em, this will be relative to the font size of the element! so 0.5em of 2rem is a 1rem padding*/
    padding: 0.5em;
    
    /* width is only long enough to contain five characters per line */
    width:  5ch;

}

.a button {
    /* em is also good to use for padding and margins related to a button */
    font-size: 1rem;
    padding:0.5em; 
}


.b {
   margin: 2em; 
   /* top-bottom:2
      right-left:3 */
   margin: 2em 3em;
   margin: 2em auto;
   /* top:2
      right-left:3
      bottom:4 */
   margin: 2em 3em 4em;   
   /* (clockwise rotation)
      top:2
      right:3
      bottom:4 
      left:5 */
   margin: 2em 3em 4em 5em;
   /* Horizontally centers element within container. equal right-left margins to fill remaining space */
   margin:auto;
   /* inherent margin from parent */
   margin-left:inherit;
   
   
   
   border-top-width: 5px;
   border-top-style: ridge;
   border-top-color: lightgreen;
   border-top: 10px solid green; /* shorthand */   
   
   border-top-style: double;
   border-right: 10px dotted blue;
   
   /* The outline doesn't take up space but the border does.not calculated in the box model equation. */
   outline:5px solid gold;
   /* Pushes it five pixels away from the box */
   outline-offset:5px;
   /* outline inside of the box */
   outline-offset:-20px;
}

.circle {
    background-color:pink;
    width:100px;
    height:100px;
    border: 2px solid purple;
    outline: 2px solid red;
    outline-offset: 0.25rem;
    margin: auto;
    
    border-radius:50%;
    /* half of the width and height */
    border-radius:50px;
}

/* Typography */
.c {
    text-decoration: underline;
    text-decoration: line-through;
    /* good for links */
    text-decoration: none;
    
    text-transform: capitalize;
    text-transform: lowercase;
    
    /* typically a default */
    text-align: left;
    /* forces words to breaking in a way where each line staarts in ends at the same x-xis point. Popular with newspapers */
    text-align: justify;
    text-align: right;
    
    line-height: 3;
    word-spacing: 2em;
    
    font-weight: 100; /* light */
    font-weight: 900; /* bold */
    font-weight: lighter;
    font-weight: bold;
    
    font-style:italic;
    /* a stronger italic */
    font-style:oblique;
    font-style:normal;
    
    /* anytime a font name has a space in it, it needs to be surrounded by quotes */
    font-family:'Courier New', Courier, monospace;
    font-family: cursive;
    font-family: 'Roboto', sans-serif;
    
}

.c span{
    letter-spacing: 2em;
}

.d a {
    /* default */
    text-decoration:underline;
    text-decoration:none;
    /* red stop value as cursor */
    cursor: not-allowed;
    color:hsl(210, 100%, 56%);
}


/* visited is a pseudo-class. Psseudo-classes represent the current state of an element. The state of an anchor element can  change */
.d a:visited {
    color:purple;
}

/* order matters. hover should come after visited, so that even if the link has been visited, the hover functionality still work 
focus is good for accessibility when the user is tabbing through the page*/
.d a:hover, a:focus {
    /* use hsl to create a slightly lighter hue (than the orig a tag above) which is good for hovering links */
    color:hsl(200, 100%, 56%);
    /* using transparency w/ opacity or hsl can also do the same thing */
    opacity:0.8;
    color:hsl(200, 100%, 56%, 0.8);
}

.d a:active {
    color:red;
}

ol, ul {
    padding-left: 3rem;
}

.e ol {
    
    /* default */
    list-style-type:decimal;
    list-style-type:decimal-leading-zero;
    /* makes an ordered list look like an unordered list */
    list-style-type:disc;    list-style-type:circle;
    list-style-type:lower-alpha;    
    list-style-type:none;    
    list-style-type:upper-roman;    
    
    
    
}

.e ul  {
    text-align:center;
    /* this is needed to keep the bullet points aligned with the text. Different browsers have different default values for this. Using an 'outside' value will keep the bullet points at their fixed position (on the left of the screen )
    
    also when the bullets are inside,padding applies to the bullets and text. when the bullets are outside, the padding only applies to the text/content*/
    list-style-position: inside;
    color:red;
    line-height:1.6;
    /* 
    only good if it's already the size you want
    list-style-image: url('images/4.jpg'); 
    */
    /* shorthand: type, image, position
    list-style: square url() inside;
     */
    
}

.e ul li:nth-child(2) {
    color:lightblue;
}

.e ul li:nth-child(odd) {
    color:darkgreen;
}

/* called a pseudo-element
Controls the bullets in a list */
ul ::marker {
    color: purple;
    font-size: 1em;
    /* this also can support images and icons, not just text */
    content: "Only five>> ";
}

/* block level elements naturally take a 100% width available from parent
block level elements also stack on top of each other*/
.f p {
    background-color: lightgray;
}

/* in-line element: only takes width necessary and does not stack/cause line break */
.f p:nth-child(2) span{
    background-color: darkgray;
    color: whitesmoke;
    /* inline elements can have padding that is  not confined to it's parent. inline-block can fix this this*/
    padding: 2rem;
}

.f .fa  {
    margin-top: 2rem;
}

.f .fa span{
    /* making this man in in-line block element made it adopt properties from both in-line and block
    - the element remains in-line, but it sizing, padding and margins will affect its parent container or so moreso changes in a way that keeps it looking like a block format
     */
    display: inline-block;
    background-color: darkgray;
    color: whitesmoke;
    padding: 2rem;
    
}

.f ul {
    list-style-type: none;
    padding-left: 0;
    text-align: right;
    background-color: lightgray;
    /* the element is completely removed from the browser 
    not accessibility friendly
    display: none;
    */
    
    
}


.f li {
    /* this is being used to make a list horizontal
    so, li are naturally block elements (stack on top of each other and consume the full width), */
    display: inline-block;
    /* this only applies to the left and right margin */
    margin-inline: 0.5rem;
}

.f li:hover, .f li:focus {
    background-color: lightblue;
}

.block {
    width: 30vw;
    height: 30vw;
    background-color: black;
    color: white;
    padding: 1rem;
}

.left {
    /* elements below this will float to the div's left */
    float: left;
}

.g p {
    /* note that there is no margin applied to the paragraph text next to the float because is outside of the normal flow */
    margin-left: 10%;
}

.block2 {
    width: 30vw;
    height: 30vw;
    background-color: darkblue;
    color: white;
    padding: 1rem;
    /* the margin should be applied to the floated object */
    margin-right: 10%;
}

.right {
    float: right;
    margin-left: 10%;
}



.clear {
    /* legacy way of stopping an element of floating next to the div. Note that the issue is that the div is still out of the normal flow, so the section is not actually containing the floated div*/
    /* clear: both; */
}

/* class for the section */
.i {
    background-color: bisque;
    /* a valid way to forced the section to contain the floated is. However this is also a legacy way */
    /* overflow: auto; */
    
    /* mdn improved way of ensuring that a parent container can fully contain floated elements */
    display:flow-root;
    
}

.flag {
    border: 2px solid black;
    width: 70%;
    /* 
    without this, the section would only expand according to its paragraph elements, not taking into consideration the length of the div. with this, the section will never have a shorter height than its elements 
    */
    display:flow-root;
}

.flag .stars{
    width: 20vw;
    height: 20vw;
    background-color: darkblue;
    float: left;
    outline: 2px solid black;
}

.flag p{
    border-width: 0px;
    margin: 0;
    height:5vw;
}

.flag p:nth-child(odd){
    background-color: red;
}

.flag .stars div{
    /* border: 2px solid black; */
    width: 4vw;
    height: 5vw;
    background-color: darkblue;
    float: left;
}    

.flag .stars div:nth-child(even) {
    background-color: whitesmoke;
}


.outer-container {
    border: 2px dashed black;
    width: 75vw;
    height: 85vh;
    margin: 40px auto;
    
}

.outer-container p {
    border: none;
}

.inner-container {
    border: 2px solid lightblue;
    width: 40vw;
    height: 50vh;
    margin: 200px auto;
    position: relative;
}

/* remove this to note that using the position tag will remove elements from the normal flow and they will no longer span the full width as a block element normally would */
.box {
    width: 150px;
    height: 150px;
    padding: 1rem;
    color: white;
}

.absolute {
    background-color: darkblue;
    /* needs a relative parent container. If one is not defined, it will treat the browser window as its relative parent
    
    the next nearest relative parent will be the relative parent chooses*/
    position: absolute;
    top: 80px;
    left: 0px;
}


.relative {
    background-color: darkred;
    /* this works very similar to absolute except it just *makes* its nearest-parent container relative rather than having to explicitly define it*/
    position: relative;
    top: 150px;
    left: 100px;
    /* this value can be adjusted to make certain elements appear on  top or behind others */
    z-index:-1;
}


/* might be good for fixed nav bars */
.fixed {
    background-color: darkgreen;
    /* position is set regardless of scrolling. its position defined will always be in reference to the browser window */
    position: fixed;
    /* both top/bottom or left/right values are needed for fixed to appear on screen */
    top: 1000px;
    left: 0px;
}

.sticky {
    /* similar to fixed. It will stay in his normal flow (fixed) until it  has reached a spot defined
    
    when the container that it is in, leaves the view of the page, so does the sticky container (cannot be positioned/moved outside of its container)*/
    position: sticky;
    background-color: black;
    /* this box will stay as 600 pixels vertical height of the browser window until it reaches the end of it's container */
    top: 600px;
    
}

.absolute-accessibility {
    background-color: goldenrod;
    /* a more accessibility friendly way then using display:none 
    moves the element visually not on the page, but can still be read by a screen reader*/
    position: absolute;
    left: -10000px;
}

.container {
    max-width: 800px;
    min-height: 400px;
    margin-inline: auto;
    border: 2px solid black;
    /* before this, the boxes had a standard block style display. After adding this, it seems liee the boxes have more of a float (left) type of structure */
    display: flex;
    /* flex-start is the default (pushes boxes to the left), flex-end pushes boxes to the right*/
    /* justify-content is used for structuring and spacing horizontally */
    justify-content: flex-end;
    justify-content: center;
    /* gap between boxes */
    gap: 1rem;
    /* evenly spaces out boxes except for the beginning and end, and thus is not commonly used */
    justify-content: space-around;
    /* evenly spaced between boxes leaving no space at the front or end */
    justify-content: space-between;
    /* causes even spacing including at the beginning and end */
    justify-content: space-evenly;
    
    
    /* thiss is for vertical alignment of the boxes */
    align-items:flex-end;
    align-items:center;
    /* default is row
    column causes the boxes to be added in the form of a column
    align-items will then become the horizontal alignment*/
    flex-direction: column;
    /* reverse direction of elements in the row 
    start and end are also reversed for justify content*/
    flex-direction: row-reverse;
    flex-direction: row;
    
    
    /* at this point, the boxes will not resize to stay within the container which is considered an overflow
    default is nowrap*/
    flex-wrap: wrap;
    /* shorthand */
    flex-flow: row wrap;
    /* same values for justify-content */
    /* align-content determines the spacing between lines, while align-items determines how the items as a whole are aligned within the container. When there is only one line, align-content has no effect. */
    align-content: flex-start;
    align-content: center;

}

.box2 {
    color: white;
    background-color: black;
    min-width: 100px;
    height: 100px;
    font-size: 2rem;
    padding: 0.5rem;
    border: 2px solid darkred;
    /* these three values can be used to center anything */
    display: flex;
    justify-content: center;
    align-items: center;
    
}

.box2:nth-child(2) {
    /* default is zero. Numbers greater than zero willl push it to the back while a negative number would push it to the front  */
    order: 1;
}

.container2 {
    flex-flow: row nowrap;
}


.box3 {
    color: white;
    background-color: black;
    
    height: 100px;
    font-size: 2rem;
    padding: 0.5rem;
    border: 2px solid darkred;
    /* these three values can be used to center anything */
    display: flex;
    justify-content: center;
    align-items: center;
    
    /* causes the box to grow as needed to fill up the container */
    flex-grow: 1;
    flex-shrink: 1;
    /* indicates when the grow/shrink properties should take effect (width val)*/
    flex-basis: 400px;
}


.box3:nth-child(2) {
    /* this means after the 250 pixels (flex-basis), this box will grow it twice the rate as the other to fill up the remaining space */
    flex-grow: 2;
    flex-shrink: 2;
    /* shorthand. grow, shrink, basis */
    flex: 2 2 150px;
}

.container3 {
    margin-top: 5%;
    width: 400px;
    height: 400px;
    display: flex;
    margin-inline: auto;
    border: 2px solid red;
    flex-direction: column;
    justify-content: space-between;
}

.box4 {
    border: 2px solid black;
    padding: 20%; 
    
}

.container4 {
    border: 5px solid darkgreen;
    margin-top: 5%;
    
    display: grid;
    /* evenly spread out columns */
    /* grid-auto-flow: column; */
    /*  3 values create 3 columns */
    grid-template-columns: 10vw 10vw 10vw;
    /* fr: fraction/parts
    this will consume the full width and the first column will have a size of 2/5 of the overall width */
    grid-template-columns: 2fr 1fr 2fr;    
    /* four columns, each one fraction */
    grid-template-columns: repeat(4, 1fr);
    grid-template-columns: repeat(2, 1fr 2fr);
    
    min-height: 100px;
    /* set (size for the row) the minimum and maximum height for a row
    auto signifies that it can grow indefinitely */
    grid-auto-rows: minmax(100px, auto);    
    grid-auto-rows: minmax(auto, auto);
    column-gap: 1em;
    row-gap: 1em;
    /* shorthand */
    gap: 1em 0.5em;
    gap: 1rem;
    
}


.box5 {
    color: white;
    background-color: black;
    
    font-size: 2rem;
    padding: 0.5rem;
    outline: 0.5px solid whitesmoke;
    
}

.box5:first-child {
    background-color: purple;
    /* this means to start at the first column line and end at the fourth column line (this will span three columns)*/
    grid-column-start: 1;
    grid-column-end: 4;
    grid-row-start: 1;
    grid-row-end: 3;
    /* shorthand: start, end */
    grid-column: 1/4;
    grid-row: 1/3;
}

.box5:nth-child(2) {
    background-color: darkgreen;
    
    /* this causes it to span the entire row */
    grid-column: 1/5;
    /* this ensures that ends up at row 3 
    
    the grid will figure out everything that is not explicitly stated. Remove this to see*/
    grid-row: 3/4;
}

/* grid within a grid */
.box5:nth-child(6) {
    /* centering with grid */
    display: grid;
    align-content: center;
    justify-content: center;
    /* shorthand: align,  justify */
    place-content: center center;
    place-content: center;
}

.box5:nth-child(7) {
    /* the end value is not have to be greater than the start! */
    grid-column-start: 4;
    grid-column-end: 2;
}

.box5:nth-child(8) {
    /* using negative values will count the lines from the right to left. So this is starts at the fourth grid line from the right and ends at the third grid line from the right */
    grid-column-start: -4;
    grid-column-end: -3;
}


.box5:nth-child(9)  {
    grid-column-start: -4;
    /* spans 2 grid spaces */
    grid-column-end: span 2;
    grid-column: -4/span 2;
}

.box5:nth-child(10)  {
    /* spans 3 grid spaces relative to the ending*/
    grid-column-start: span 3;
    grid-column-end: 6;
    grid-column: span 3/6;
}

.container5 {
    grid-template-columns: repeat(4, 1fr);    
    grid-template-rows: repeat(14, 1fr);
    
    /* shorthand
    grid-template-rows / grid-template-columns*/
    grid-template: repeat(14, 1fr) / repeat(4, 1fr);
}

.box5:nth-child(11) {
    /* shorthand
    grid-row-start
    grid-column-start
    grid-row-end
    grid-column-end
    OR
    (row, col, row, col)
     */
    grid-area: 8/2/11/6;
    grid-area: 8/2/span 3/span 4;
}

.box5:nth-child(12) {
    order: 1;
}










